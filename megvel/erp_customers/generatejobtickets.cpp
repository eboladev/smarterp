#include "generatejobtickets.h"
#include "ui_generatejobtickets.h"
#include "qtprinter.h"
#include "jobticketprinter.h"
GenerateJobTickets::GenerateJobTickets(QWidget *parent, QSqlDatabase database, QString productID) :
	QDialog(parent),
	ui(new Ui::GenerateJobTickets)
{
	ui->setupUi(this);
	count = 0;
	qDebug() << "Starting job ticket generation...";
	db = database;
	prodID = productID;

	intB = 1.35;
	intC = 1.45;
	intEE = 1.25;
	intM = 1000000;

	DataPublics::loadQueryToComboBox("SELECT * FROM artwork", "Description", db, ui->cboArtwork);
	DataPublics::loadQueryToComboBox("SELECT * FROM sterio", "Description", db, ui->cboSterio);
	DataPublics::loadQueryToComboBox("SELECT * FROM sample", "Description", db, ui->cboSample);
	DataPublics::loadQueryToComboBox("SELECT * FROM dietypes", "Description", db, ui->cboDieType);
	DataPublics::loadQueryToComboBox("SELECT * FROM dieunits", "Description", db, ui->cboDieUnit);

	DataPublics::loadQueryToComboBox("SELECT * FROM colors", "ColorName", db, ui->cboInk1);
	DataPublics::loadQueryToComboBox("SELECT * FROM colors", "ColorName", db, ui->cboInk2);
	DataPublics::loadQueryToComboBox("SELECT * FROM colors", "ColorName", db, ui->cboInk3);
	DataPublics::loadQueryToComboBox("SELECT * FROM colors", "ColorName", db, ui->cboInk4);

	DataPublics::loadQueryToComboBox("SELECT * FROM printers", "Printer", db, ui->cboPrinter);

	QString customerID = DataPublics::getDbValue("SELECT * FROM products WHERE `Product ID` = '" + prodID + "'", db, "Customer").toString();
	QString productName = DataPublics::getDbValue("SELECT * FROM products WHERE `Product ID` = '" + prodID + "'", db, "Product").toString();


	ui->cboVAT->setEditText(DataPublics::getDbValue("SELECT * FROM products WHERE `Product ID` = '" + prodID + "'", db, "VAT").toString());

	custID = customerID;


	QString salesRepID = DataPublics::getDbValue("SELECT * FROM customers WHERE CustomerID = '" + custID + "'"
						     , db , "SalesRep").toString();
	QString salesRepName = DataPublics::getDbValue("SELECT * FROM salesreps WHERE SalesRepID = '" + salesRepID + "'"
						       , db , "FullName").toString();

	ui->txtSales->setText("Generated by " + salesRepName);

	QSqlQuery qu = db.exec("SELECT * FROM customers WHERE CustomerID = '" + customerID + "'");
	qu.first();
	ui->txtCustomerDetails->setHtml("<b>" + qu.record().value("CompanyName").toString() + "</b><br/>" +
					qu.record().value("Address").toString() + "<br/><br/>Product: " + productName
					);
	custName = qu.record().value("CompanyName").toString();
	address = qu.record().value("Address").toString();
	prodName = productName;
	ui->txtQty->setText(0);
	QDate mysqlDate = QDate::fromString(DataPublics::getDbValue("SELECT CURRENT_DATE() as dt", db, "dt").toString(), "yyyy-MM-dd");
	ui->dtpDate->setDate(mysqlDate);
	ui->dtpDateDue->setDate(mysqlDate.addDays(4));

	waxing = "No"; fitments = "No"; layerpads = "No";

	FetchProductDetails();
}

GenerateJobTickets::~GenerateJobTickets()
{
	delete ui;
}

void GenerateJobTickets::FetchProductDetails()
{
	QSqlQuery qu = db.exec("SELECT * FROM products WHERE `Product ID` = '" + prodID + "'");
	if (qu.lastError().isValid()) {
		QMessageBox::critical(this, "Error", "There was an error during product detail retrieval.\n\nPlease contact your IT support.");
		this->reject();
		return;
	}
	qu.first();
	ID_L = qu.record().value("ID_L").toString();
	ID_W = qu.record().value("ID_W").toString();
	ID_H = qu.record().value("ID_H").toString();
	OD_L = qu.record().value("OD_L").toString();
	OD_W = qu.record().value("OD_W").toString();
	OD_H = qu.record().value("OD_H").toString();

	dieInstructions = qu.record().value("DieInstructions").toString();
	ui->spinNoOfColors->setValue(qu.record().value("NumberOfColors").toInt());
	currency = qu.record().value("currency").toString();
	PL = qu.record().value("PL").toString();

	Gram1 = qu.record().value("Gram1").toString();
	Gram2 = qu.record().value("Gram2").toString();
	Gram3 = qu.record().value("Gram3").toString();
	Gram4 = qu.record().value("Gram4").toString();
	Gram5 = qu.record().value("Gram5").toString();

	Type1 = qu.record().value("Type1").toString();
	Type2 = qu.record().value("Type2").toString();
	Type3 = qu.record().value("Type3").toString();
	Type4 = qu.record().value("Type4").toString();
	Type5 = qu.record().value("Type5").toString();

	iB = qu.record().value("B").toString();
	iC = qu.record().value("C").toString();
	iE = qu.record().value("E").toString();


	ui->Product_CodeTextBox->setText(qu.record().value("Product Code").toString());
	ui->cboArtwork->setEditText(qu.record().value("Artwork").toString());
	ui->cboDieType->setEditText( qu.record().value("DType").toString());
	ui->cboDieUnit->setEditText(qu.record().value("DUnit").toString());
	ui->cboSample->setEditText(qu.record().value("Sample").toString());
	ui->cboInk1->setEditText(qu.record().value("Ink1").toString());
	ui->cboInk2->setEditText(qu.record().value("Ink2").toString());
	ui->cboInk3->setEditText(qu.record().value("Ink3").toString());
	ui->cboInk4->setEditText(qu.record().value("Ink4").toString());
	ui->SpecialInstructionsTextBox->setText(qu.record().value("SpecialInstructions").toString());
	origIns = ui->SpecialInstructionsTextBox->toPlainText();
	ui->cboSterio->setEditText(qu.record().value("Sterio").toString());
	ui->FlapTextBox->setEditText(qu.record().value("Flap").toString());
	ui->WaxingTextBox->setEditText(qu.record().value("Waxing").toString());

	ui->LayerpadsTextBox->setEditText(qu.record().value("LayerPads").toString());
	ui->LayerPadsHTextBox->setText(qu.record().value("LayerPadsH").toString());
	ui->LayerPadsLTextBox->setText(qu.record().value("LayerPadsL").toString());
	ui->LayerPadsQtyTextBox->setText(qu.record().value("LayerPadsQty").toString());
	ui->FitmentsTextBox->setEditText(qu.record().value("Fitments").toString());
	ui->FitmentsH_LTextBox->setText(qu.record().value("FitmentH_L").toString());
	ui->FitmentsHTextBox->setText(qu.record().value("FitmentH").toString());
	ui->FitmentsL_LTextBox->setText(qu.record().value("FitmentL_L").toString());
	ui->FitmentsLTextBox->setText(qu.record().value("FitmentL").toString());
	ui->FitmentsQtyLTextBox->setText(qu.record().value("FitmentQtyL").toString());
	ui->FitmentsQtySTextBox->setText(qu.record().value("FitmentQtyS").toString());
	ui->FitmentsSlots_LTextBox->setText(qu.record().value("FitmentSlots_L").toString());
	ui->FitmentsSlotsTextBox->setText(qu.record().value("FitmentSlots").toString());

	ui->txtID->setText(ID_L + " x " + ID_W + " x " + ID_H);
	ui->txtOD->setText(OD_L + " x " + OD_W + " x " + OD_H);


	QString bce = "";
	if (iB == "True")
		bce = "B";

	if (iC == "True")
		bce = bce + "C";

	if (iE == "True")
		bce = bce + "E";

	ui->txtFL->setText(bce);
	QString strSpecs  = "";
	if (PL == "2 Ply" || PL == "SFK" ) {
		strSpecs = Gram1 + Type1 + " / " + Gram2 + Type2;
	} else if (PL.contains("3")) {
		strSpecs = Gram1 + Type1 + " / " + Gram2 + Type2 + " / " + Gram3 + Type3;
	} else if ( PL.contains("5")) {
		strSpecs = Gram1 + Type1 + " / " + Gram2 + Type2 + " / " + Gram3 + Type3 + " / " + Gram4 + Type4 + " / " + Gram5 + Type5;
	} else if  (PL == "Die Cut Carton") {
		//'txtF1.ReadOnly = False
		//'txtF2.ReadOnly = False
		//'txtF3.ReadOnly = False
	} else {
		strSpecs = Gram1 + Type1 + " / " + Gram2 + Type2 + " / " + Gram3 + Type3;
	}
	if (PL.contains("Die")) {
		//'txtF1.ReadOnly = False
		//'txtF2.ReadOnly = False
		//'txtF3.ReadOnly = False
	}
	ui->txtPaperSpecs->setText(strSpecs);
}

void GenerateJobTickets::RefreshTexts()
{


	CalculateDetails();

	if (count == 1 ) {
		QString pl = DataPublics::getDbValue("SELECT PL FROM products WHERE `Product ID` = '" + prodID + "'", db, "PL").toString();
		if (pl.contains("(H)")) {
			CalculateDetails();
		}
	}


	QString accbal  = "0";
	QString rpLimit  = "0";
	QString pRP  = "1";
	accbal = DataPublics::getDbValue("SELECT CreditLimit FROM customers WHERE CustomerID = '" + cID + "'", db, "CreditLimit").toString();
	rpLimit = DataPublics::getDbValue("SELECT MinimumRP FROM customers WHERE CustomerID = '" + cID + "'", db, "MinimumRP").toString();
	pRP = DataPublics::getDbValue("SELECT RetailPrice FROM products WHERE `Product ID` = '" + prodID + "'", db, "RetailPrice").toString();
	if (accbal == "0") {
		//'0 is ok
	} else if ((ui->txtPrice->text().toDouble() * ui->txtQty->text().toDouble()) > accbal.toDouble()) {
		// DataPublics::showWarning("This customer has already exceeded their credit limit");
	}

	if (rpLimit == "0") {
		// 'o is ok
	} else if (pRP.toDouble() < rpLimit.toDouble()) {
		// DataPublics::showWarning("This product is below the minimum rp for this customer");
	}
}

void GenerateJobTickets::CalculateDetails()
{

	count = count + 1;
	QString Query  = "SELECT * FROM products WHERE `product id` = '" + prodID + "'";

	QSqlQuery qu = db.exec(Query);
	if (qu.lastError().isValid()) {
		DataPublics::showWarning(qu.lastError().text());
		return;
	}

	if (!qu.first()) {
		DataPublics::showWarning("Database Error. Please try again.");
		return;
	}

	//All OK
	QString bce = "";
	if (qu.record().value("B").toString() == "True")
		bce = "B";

	if (qu.record().value("C").toString() == "True")
		bce = bce + "C";

	if (qu.record().value("E").toString() == "True")
		bce = bce + "E";

	if (qu.record().value("PL").toString().contains("SFK")) {
		ui->txtWeight->setText("1");
		ui->txtTons->setText(QString::number(ui->txtQty->text().toDouble() / 1000));
		//return;
	}

	ID = qu.record().value("ID_L").toString() + "x" + qu.record().value("ID_W").toString() + "x" + qu.record().value("ID_H").toString();
	OD = qu.record().value("OD_L").toString() + "x" + qu.record().value("OD_W").toString() + "x" + qu.record().value("OD_H").toString();
	productCode = "";
	DieType = qu.record().value("DieUnit").toString();
	dieUnit = qu.record().value("DieType").toString();
	ui->txtPrice->setText(qu.record().value("Price").toString());
	flap = qu.record().value("Flap").toString();
	fitments = qu.record().value("Fitments").toString();
	waxing = qu.record().value("Waxing").toString();
	layerpads = qu.record().value("LayerPads").toString();

	QString leng = qu.record().value("OD_L").toString();
	QString wid  = qu.record().value("OD_W").toString();
	QString heig  = qu.record().value("OD_H").toString();
	T = QString::number(round2(ui->txtT->text().toDouble()));
	if (T.toDouble() > 4)
		T = 4;

	if (T.toDouble() < 0)
		T = 1;



	if (qu.record().value("PL").toString().contains("Die")) {
		ui->txtF1->setText(qu.record().value("F1").toString());
		ui->txtF2->setText(qu.record().value("F2").toString());
		ui->txtF3->setText(qu.record().value("F3").toString());

		if (!qu.record().value("PL").toString().contains("(H)")) {
			ui->txtF1->setText("0");
			ui->txtF2->setText("0");
			ui->txtF3->setText("0");
			L = qu.record().value("BL").toString();
			S = qu.record().value("BW").toString();
			ui->txtWeight->setText(qu.record().value("Divided").toString());
		} else {
			qDebug() << "H1";
			double dF1 =  0, dF2 = 0, dF3 = 0;
			qDebug() << "H2";
			dF1 = F1.toDouble();
			dF2 = F2.toDouble();
			dF3 = F3.toDouble();
			qDebug() << "H3";
			double dTot = dF1 + dF2 + dF3;
			round_nplaces(dTot, 2);
			S = QString::number(dTot);
			//L = round2(Val(2 * (Val(leng) + Val(wid))) + Val(0));
			L = qu.record().value("BL").toString();
			qDebug() << "(H) Debug" << S << L;
		}

		F1 = QString::number(round2(ui->txtF1->text().toDouble()));
		F2 = QString::number(round2(ui->txtF2->text().toDouble()));
		F3 = QString::number(round2(ui->txtF3->text().toDouble()));
		qDebug() << "Done with die cut";
	} else if (qu.record().value("PL").toString().contains("SFK")) {
		//
		F1  = "0";
	} else {
		F1 = QString::number(round2((wid.toDouble() / 2) + 2));
		F2 = QString::number(round2(heig.toDouble()));
		F3 = QString::number(round2(wid.toDouble() / 2) + 2);
		S = QString::number(round2(F1.toDouble() + F2.toDouble() + F3.toDouble()));
		L = QString::number(round2((2 * ((leng.toDouble()) + (wid.toDouble())) + 40)));
	}
	qDebug() << "1";
	bool corr = false;
	T = "5";
	qDebug() << "2";
	while ((corr == false)) {
		qDebug() << "TLoop 1";
		T = QString::number(T.toDouble() - 1);
		if (T.toDouble() < 1) {
			qDebug() << "TLoop 2";
			T = "1";
			W = "1800";
			break;
		} else {
			qDebug() << "TLoop 3";
			if (qu.record().value("PL").toString().contains("3 Ply")) {
				W = QString::number(S.toDouble() * T.toDouble());
				W = QString::number(W.toDouble() + 20);
			}
			else if (qu.record().value("PL").toString().contains("5 Ply")) {
				W = QString::number(S.toDouble() * T.toDouble());
				W = QString::number(W.toDouble() + 30);
			}
			qDebug() << "TLoop 4" << W << S << T;
			if (W.toDouble() > 949 && W.toDouble() < 1801)  {
				corr = true;
				if (W.toDouble() < 950 )
					W = "950";
				if (W.toDouble() > 1800)
					W = "1800";
				W = QString::number(round2(W.toDouble()));
				double Wx  = W.toDouble();
				if (Wx > 1761)  {
					W = "1800";
				} else if(Wx < 1761 && Wx > 1710 ) {
					W = "1760";
				} else if(Wx < 1711 && Wx > 1660 ) {
					W = "1710";
				} else if(Wx < 1661 && Wx > 1600 ) {
					W = "1660";
				} else if(Wx < 1601 && Wx > 1560 ) {
					W = "1600";
				} else if(Wx < 1561 && Wx > 1500 ) {
					W = "1560";
				} else if(Wx < 1501 && Wx > 1450 ) {
					W = "1500";
				} else if(Wx < 1451 && Wx > 1400 ) {
					W = "1450";
				} else if(Wx < 1401 && Wx > 1360 ) {
					W = "1400";
				} else if(Wx < 1361 && Wx > 1300 ) {
					W = "1360";
				} else if(Wx < 1301 && Wx > 1250 ) {
					W = "1300";
				} else if(Wx < 1251 && Wx > 1150 ) {
					W = "1250";
				} else if(Wx < 1151 && Wx > 1050 ) {
					W = "1150";
				} else if(Wx < 1051 && Wx > 950)  {
					W = "1050";
				} else if(Wx < 1050)  {
					W = "950";
				}
				qDebug() << "TLoop 5";
			}
			qDebug() << "TLoop 6";
		}
		qDebug() << "TLoop 7";
	} //End of for loop
	qDebug() << "3";
	if (W.toDouble() > 1800) {
		W = "1800";
		T = "1";
	}
	if (W.toDouble() < 950) {
		W = "950";
		T = "4";
	}
	qDebug() << "4";
	T = QString::number(round2(T.toDouble()));
	if (T.toDouble() > 4)
		T = "4";
	if (T.toDouble() < 0)
		T = "1";
	qDebug() << "5";
	ui->txtT->setText(T);
	ui->txtID->setText(ID);
	ui->txtOD->setText(OD);

	qDebug() << "6";
	double newQty = ui->txtQty->text().toDouble();

	if (newQty < 3001) {
		newQty = newQty + 50;
	} else if (newQty > 3000) {
		newQty = newQty + 100;
	}
	qDebug() << "7";
	A = QString::number(round2(newQty / T.toDouble()));

	if (PL.contains("Die")) {
		int outs = qu.record().value(("outs")).toString().toInt();
		if (outs < 0)
			outs = 0;

		A = QString::number(newQty / (T.toDouble() * outs));
	}
	qDebug() << "8";
	QString trim = "0";
	trim = QString::number(W.toDouble() - (T.toDouble() * S.toDouble()));

	double waste = 0;
	double weight = 0;
	double tonnes = 0;
	qDebug() << "9";
	weight = qu.record().value("WT").toDouble();

	if (weight < 0)
		weight = 0;


	if (qu.record().value("PL").toString().contains("SFK")) {
		weight = 1;
	}
	qDebug() << "10";
	tonnes = (weight * ui->txtQty->text().toDouble()) / 1000;

	qDebug() << weight << tonnes;

	QString trimTotal1 = "0";
	QString trimTotal2 = "0";
	QString trimTotal3 = "0";
	QString trimTotal4 = "0";
	QString trimTotal5 = "0";

	QString approxQty1 = "0";
	QString approxQty2 = "0";
	QString approxQty3 = "0";
	QString approxQty4 = "0";
	QString approxQty5 = "0";

	double appL = L.toDouble();
	double appW = W.toDouble();
	double appA = A.toDouble();
	double appT = trim.toDouble() / 1000;

	long _CONST_BILL = 1000000000;

	double dTrimTotal1 = 0;
	double dTrimTotal2 = 0;
	double dTrimTotal3 = 0;
	double dTrimTotal4 = 0;
	double dTrimTotal5 = 0;
	double dApproxQty1 = 0;
	double dApproxQty2 = 0;
	double dApproxQty3 = 0;
	double dApproxQty4 = 0;
	double dApproxQty5 = 0;

	dApproxQty1 = ((appL * appW * Gram1.toDouble()) / _CONST_BILL) * A.toDouble();
	dTrimTotal1 = ((appT * appL * Gram1.toDouble()) / _CONST_BILL) * A.toDouble();

	dApproxQty3 = ((appL * appW * Gram3.toDouble()) / _CONST_BILL) * A.toDouble();
	dTrimTotal3 = ((appT * appL * Gram3.toDouble()) / _CONST_BILL) * A.toDouble();

	qDebug() << "11";

	if (Type2 == "B") {
		dApproxQty2 = ((appL * appW * Gram2.toDouble() * intB) / _CONST_BILL) * A.toDouble();
		dTrimTotal2 = ((appT * appL * Gram2.toDouble() * intB) / _CONST_BILL) * A.toDouble();
	}
	if (Type2 == "C") {
		dApproxQty2 = ((appL * appW * Gram2.toDouble() * intC) / _CONST_BILL) * A.toDouble();
		dTrimTotal2 = ((appT * appL * Gram2.toDouble() * intC) / _CONST_BILL) * A.toDouble();
	}
	if (Type2 == "C") {
		dApproxQty2 = ((appL * appW * Gram2.toDouble() * intEE) / _CONST_BILL) * A.toDouble();
		dTrimTotal2 = ((appT * appL * Gram2.toDouble() * intEE) / _CONST_BILL) * A.toDouble();
	}

	round_nplaces(dTrimTotal1, 3);
	round_nplaces(dTrimTotal2, 3);
	round_nplaces(dTrimTotal3, 3);

	round_nplaces(dApproxQty1, 3);
	round_nplaces(dApproxQty2, 3);
	round_nplaces(dApproxQty3, 3);

	trimTotal1 = QString::number(dTrimTotal1);
	trimTotal2 = QString::number(dTrimTotal2);
	trimTotal3 = QString::number(dTrimTotal3);
	approxQty1 = QString::number(dApproxQty1);
	approxQty2 = QString::number(dApproxQty2);
	approxQty3 = QString::number(dApproxQty3);

	ApproxQty = approxQty1 + " / " + approxQty2 + " / " + approxQty3;
	TrimText = trimTotal1 + " / " + trimTotal2 + " / " + trimTotal3;

	qDebug() << "12";
	if (qu.record().value("PL").toString() == "5 Ply") {
		dApproxQty5 = ((appL * appW * Gram5.toDouble()) / _CONST_BILL) * A.toDouble();
		dTrimTotal5 = ((appT * appL * Gram5.toDouble()) / _CONST_BILL) * A.toDouble();
		if (Type4 == "B") {
			dApproxQty4 = ((appL * appW * Gram4.toDouble() * intB) / _CONST_BILL) * A.toDouble();
			dTrimTotal4 = ((appT * appL * Gram4.toDouble() * intB) / _CONST_BILL) * A.toDouble();
		}
		if (Type4 == "C") {
			dApproxQty4 = ((appL * appW * Gram4.toDouble() * intC) / _CONST_BILL) * A.toDouble();
			dTrimTotal4 = ((appT * appL * Gram4.toDouble() * intC) / _CONST_BILL) * A.toDouble();
		}
		if (Type4 == "E") {
			dApproxQty4 = ((appL * appW * Gram4.toDouble() * intEE) / _CONST_BILL) * A.toDouble();
			dTrimTotal4 = ((appT * appL * Gram4.toDouble() * intEE) / _CONST_BILL) * A.toDouble();
		}

		round_nplaces(dTrimTotal4, 3);
		round_nplaces(dTrimTotal5, 3);

		round_nplaces(dApproxQty4, 3);
		round_nplaces(dApproxQty5, 3);


		trimTotal4 = QString::number(dTrimTotal4);
		trimTotal5 = QString::number(dTrimTotal5);
		approxQty4 = QString::number(dApproxQty4);
		approxQty5 = QString::number(dApproxQty5);

		ApproxQty = ApproxQty + " / " + approxQty4 + " / " + approxQty5;
		TrimText = TrimText + " / " + trimTotal4 + " / " + trimTotal5;
	}
	qDebug() << "13";
	double dTrimTotal = dTrimTotal1 + dTrimTotal2 + dTrimTotal3 + dTrimTotal4 + dTrimTotal5;
	double dApproxQtyTotal = dApproxQty1 + dApproxQty2 + dApproxQty3 + dApproxQty4 + dApproxQty5;

	round_nplaces(dTrimTotal, 3);
	round_nplaces(dApproxQtyTotal, 3);

	TrimTotal = QString::number(dTrimTotal);
	approxQtyTotal = QString::number(dApproxQtyTotal);

	if (qu.record().value("PL").toString().contains("Die")) {
		weight = qu.record().value("divided").toDouble();
	}

	ui->txtWeight->setText(QString::number(weight));
	tonnes = (weight / 1000) * ui->txtQty->text().toDouble();
	ui->txtTons->setText(QString::number(tonnes));

	qDebug() << "14";

	ui->txtApproxQty->setText(ApproxQty);
	ui->txtFL->setText(bce);
	ui->txtTrim2->setText(TrimText);
	ui->txtTrimTotal->setText(TrimTotal);
	ui->txtTrim->setText(trim);
	ui->txtA->setText(A);
	ui->txtW->setText(W);
	ui->txtF1->setText(F1);
	ui->txtL->setText(L);
	ui->txtT->setText(T);
	ui->txtF2->setText(F2);
	ui->txtS->setText(S);
	ui->txtF3->setText(F3);
	qDebug() << "15";
}


void GenerateJobTickets::on_txtQty_lostFocus()
{

}

void GenerateJobTickets::on_cmdGenerate_clicked()
{
	//    if (ui->cboVAT->currentText().trimmed().length() < 1) {
	//        DataPublics::showWarning("Please ensure that the <b>VAT</b> is specified.");
	//        ui->cboVAT->setFocus();
	//        return;
	//    }

	db.exec("UPDATE products SET VAT = '" + ui->cboVAT->currentText() + "' WHERE `Product Id` = '" +
		prodID + "'"
		);

	QString oc_no = QDateTime::currentDateTime().toString("yyyy/MMM/dd/mm/ss/zzz");

	if (PL.contains("Die")) {
		ui->txtID->setText("");
		ui->txtOD->setText("");
	}

	QString query = "insert into `newreport`(`ReportID`, `Client`,`Address`,`Code`,`Product`, "
			"`Date`, `TheDate`, `LPONo`,`DelDate`,`Price`,`Weight`,`ID`,`OD`,`Qty`,`Tons`,`Trim`, "
			"`PaperSpecs`,`A`,`W`,`F1`,`L`,`T`,`F2`,`FL`,`S`,`F3`, "
			"`Boards`,`Printer`,`Artwork`,`Sterio`,`Sample`,`Ink1`,`Ink2`,`Ink3` ,"
			"`Ink4`,`DieUnit`,`DieType`,`Flap`,`Waxing`,`Fitments`,`SlotsL`, "
			"`SlotsS`,`FQtyL`,`FQtyS`,`FLL`,`FLS`,`FWL`,`FWS`,`LayerPads`, "
			"`PreparedBy`, `Currency`, `Dat`, `Dat2`, `ArtWorkReady`, `SterioReady`, `SampleReady`, `Instructions`, "
			"`DieInstructions` ,`TrimText`,`TrimTotal`,`ApproxQty`,`ApproxTotal`) values ('"
			+ oc_no + "', '" +
			custName + "', '" +
			address + "', '" +
			ui->Product_CodeTextBox->text() + "', '" +
			prodName  + "', '" +
			ui->dtpDate->date().toString("yyyy-MM-dd") + "', '" +
			ui->dtpDate->date().toString("d-M-yy") + "', '" +
			ui->txtLPONo->text() + "', '" +
			ui->dtpDateDue->date().toString("yyyy-MM-dd") + "', '" +
			ui->txtPrice->text() + "', '" +
			ui->txtWeight->text() + "', '" +
			ui->txtID->text() + "', '" +
			ui->txtOD->text() + "', '" +
			ui->txtQty->text() + "', '" +
			ui->txtTons->text() + "', '" +
			ui->txtTrim->text() + "', '" +
			ui->txtPaperSpecs->text() + "', '" +
			A + "', '" +
			W + "', '" +
			F1 + "', '" +
			L + "', '" +
			T + "', '" +
			F2 + "', '" +
			ui->txtFL->text() + "', '" +
			S + "', '" +
			F3 + "', '" +
			ui->txtBoards->text() + "', '" +
			ui->cboPrinter->currentText() + "', '" +
			ui->cboArtwork->currentText() + "', '" +
			ui->cboSterio->currentText() + "', '" +
			ui->cboSample->currentText() + "', '" +
			ui->cboInk1->currentText() + "', '" +
			ui->cboInk2->currentText() + "', '" +
			ui->cboInk3->currentText() + "', '" +
			ui->cboInk4->currentText() + "', '" +
			ui->cboDieUnit->currentText() + "', '" +
			ui->cboDieType->currentText() + "', '" +
			ui->FlapTextBox->currentText() + "', '" +
			ui->WaxingTextBox->currentText() + "', '" +
			ui->FitmentsTextBox->currentText() + "', '" +
			ui->FitmentsSlots_LTextBox->text() + "', '" +
			ui->FitmentsSlotsTextBox->text() + "', '" +
			ui->FitmentsQtyLTextBox->text() + "', '" +
			ui->FitmentsQtySTextBox->text() + "', '" +
			ui->FitmentsL_LTextBox->text() + "', '" +
			ui->FitmentsLTextBox->text() + "', '" +
			ui->FitmentsH_LTextBox->text() + "', '" +
			ui->FitmentsHTextBox->text() + "', '" +
			ui->LayerpadsTextBox->currentText() + "', '" +
			ui->txtSales->text() + " on " + QDateTime::currentDateTime().toString("dd-MMM-yy hh:mm") + "', '" +
			currency  + "', '" +
			ui->dtpDate->date().toString("yyyy-MM-dd") + "', '" +
			ui->dtpDate->date().toString("yyyy-MM-dd") + "', '" +
			"-" + "', '" +
			"-" + "', '" +
			"-" + "', '" +
			ui->SpecialInstructionsTextBox->toPlainText() + "', '" +
			dieInstructions + "', '" +
			TrimText + "', '" +
			ui->txtTrimTotal->text() + "', '" +
			ApproxQty + "', '" +
			approxQtyTotal + "')";

	qDebug() << query;

	QSqlQuery qu = db.exec(query);
	if (qu.lastError().isValid()) {
		DataPublics::showWarning(qu.lastError().text());
		return;
	}

	QString ticketNo = DataPublics::getDbValue("SELECT TicketNo FROM newreport WHERE ReportID = '" + oc_no + "'", db, "TicketNo").toString();

	db.exec("UPDATE newreport SET Oc = TicketNo TicketNo  WHERE ReportID = '" + oc_no + "'");

	QSqlQuery qu2 = db.exec("SELECT * FROM newreport WHERE ReportID = '" + oc_no + "'");
	while (qu2.next()) {
		db.exec("INSERT INTO qc (TicketNo, CustomerName, Product, OrderQty) VALUES ('"
			+ qu2.record().value("TicketNo").toString() + "', '"
			+ qu2.record().value("Client").toString() + "', '"
			+ qu2.record().value("Product").toString() + "', '"
			+ qu2.record().value("Qty").toString() + "')");

		db.exec("INSERT INTO OcDetails (OcNumber, ProductID, CustomerID) VALUES ('"
			+ oc_no + "', '"
			+ prodID + "', '"
			+ custID + "')");
	}

	//QtPrinter(this, db, ticketNo, "OC", "Yes");
	JobTicketPrinter(this, ticketNo, db);
	this->close();
}

void GenerateJobTickets::on_txtQty_editingFinished()
{
	qDebug() << "Refreshing...";
	RefreshTexts();
	ui->txtBoards->setText(ui->txtQty->text());
}

void GenerateJobTickets::round_nplaces(double &value, const int &to)
{
	int places = 1, whole = *(&value);
	for(int i = 0; i < to; i++) places *= 10;
	value -= whole; //leave decimals
	value *= places;  //0.1234 -> 123.4
	value  = round2(value);//123.4 -> 123
	value /= places;  //123 -> .123
	value += whole; //bring the whole value back
}

double GenerateJobTickets::round2(double number)
{
	return number < 0.0 ? ceil(number - 0.5) : floor(number + 0.5);
}

void GenerateJobTickets::on_txtQty_returnPressed()
{
	ui->txtLPONo->setFocus();
}
